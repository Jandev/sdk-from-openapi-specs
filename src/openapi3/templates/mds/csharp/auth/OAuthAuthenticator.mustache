{{>partial_header}}

using System;
using System.Threading.Tasks;
using Newtonsoft.Json;
using RestSharp;
using RestSharp.Authenticators;
using Azure.Identity;
using Azure.Core;

namespace {{packageName}}.Client.Auth
{
    /// <summary>
    /// An authenticator for OAuth2 authentication flows
    /// </summary>
    public class OAuthAuthenticator : AuthenticatorBase
    {
        readonly string _tokenUrl;
        readonly string _clientId;
        readonly string _clientSecret;
        readonly string _applicationIdUri;
        readonly string _tentantId;
        readonly bool _onBehalfOfUser;

        readonly string _grantType;
        readonly JsonSerializerSettings _serializerSettings;
        readonly IReadableConfiguration _configuration;

        const string OBO = "obo";
        const string CLIENT_CREDENTIALS = "client_credentials";
        /// <summary>
        /// Initialize the OAuth2 Authenticator
        /// </summary>
        public OAuthAuthenticator(
            string tokenUrl,
            string clientId,
            string clientSecret,
            string{{nrt?}} scope,
            OAuthFlow? flow,
            JsonSerializerSettings serializerSettings,
            IReadableConfiguration configuration) : base("")
        {
            _tokenUrl = tokenUrl;
            _clientId = clientId;
            _clientSecret = clientSecret;
            _serializerSettings = serializerSettings;
            _configuration = configuration;
            switch (flow)
            {
                case OAuthFlow.APPLICATION:
                    _grantType = CLIENT_CREDENTIALS;
                    break;
                case OAuthFlow.OBO:
                    _grantType = OBO;
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// Creates an authentication parameter from an access token.
        /// </summary>
        /// <param name="accessToken">Access token to create a parameter from.</param>
        /// <returns>An authentication parameter.</returns>
        protected override async ValueTask<Parameter> GetAuthenticationParameter(string accessToken)
        {
            var token = string.IsNullOrEmpty(Token) ? await GetToken().ConfigureAwait(false) : Token;
            return new HeaderParameter(KnownHeaders.Authorization, token);
        }

        /// <summary>
        /// Gets the token from the OAuth2 server.
        /// </summary>
        /// <returns>An authentication token.</returns>
        private async Task<string> GetToken()
        {
            string applicationIdUri = this._configuration.MdsApplicationIdUri ?? throw new InvalidOperationException("MdsApplicationIdUri is not configured.");

			string userAssignedClientId = this._configuration.UserAssignedManagedIdentityClientId;
			try
			{
				bool isRunningLocal = string.IsNullOrEmpty(userAssignedClientId) && string.IsNullOrEmpty(_clientId);

                string accessToken;
				if (isRunningLocal)
				{
					accessToken = await GetManufacturingAccessTokenDefaultIdentity(applicationIdUri);
					return "Bearer " + accessToken;
				}
				else
				{
                    if (string.IsNullOrEmpty(_clientSecret))
                    {
                        accessToken = await GetManufacturingAccessTokenUserManagedIdentity(userAssignedClientId, applicationIdUri);
                        return "Bearer " + accessToken;
                    }
                    else
                    {
                        accessToken = await GetManufacturingAccessTokenForServicePrincipal(_clientId, _clientSecret, applicationIdUri);
                    }
					return "Bearer " + accessToken;
				}
			}
			catch (Exception ex)
			{
				throw;
			}
        }

        private async Task<string> GetManufacturingAccessTokenForServicePrincipal(string clientId, string clientSecret, string applicationIdUri)
        {
            string scopeToRequest;
            if(_grantType == OBO)
            {
                scopeToRequest = applicationIdUri + "/access_as_user";
            }
            else
            {
                scopeToRequest = applicationIdUri + "/.default"; 
            }

            var credential = new ClientSecretCredential(
                this._configuration.OAuthTenantId,
                clientId,
                clientSecret
            );

            var token = await credential.GetTokenAsync(new TokenRequestContext(new[] { scopeToRequest }));
            return token.Token;
        }

        private async Task<string> GetManufacturingAccessTokenUserManagedIdentity(string userAssignedClientId, string applicationIdUri)
        {
            var tokenCredential = new ManagedIdentityCredential(userAssignedClientId);

            string scopeToRequest;
            if(_grantType == OBO)
            {
                scopeToRequest = applicationIdUri + "/access_as_user";
            }
            else
            {
                scopeToRequest = applicationIdUri + "/.default"; 
            }

            var accessToken = await tokenCredential.GetTokenAsync(
                new TokenRequestContext(scopes: new string[] { scopeToRequest }) { }
            );

            return accessToken.Token;
        }

        private async Task<string> GetManufacturingAccessTokenDefaultIdentity(string applicationIdUri)
        {
            var credential = new DefaultAzureCredential();
            var tokenRequest = new TokenRequestContext(new[] { applicationIdUri });
            var token = await credential.GetTokenAsync(tokenRequest);
            return token.Token;
        }
    }
}
